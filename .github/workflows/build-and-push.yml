name: CI/CD - Deploy Backend

on:
  push:
    branches:
      - main  # Ejecutar cuando haya un push a producci贸n

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Clonar el c贸digo
      - name: Checkout del c贸digo
        uses: actions/checkout@v3

      # Configurar JDK y Maven
      - name: Configurar JDK 22 y Maven
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '22'

      - name: Compilar con Maven
        run: mvn clean package -DskipTests

      # Iniciar sesi贸n en Docker Hub
      - name: Login en Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Construir y etiquetar la imagen Docker
      - name: Construir la imagen Docker
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/gestor-clientes-back:latest .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/gestor-clientes-back:latest ${{ secrets.DOCKERHUB_USERNAME }}/gestor-clientes-back:${{ github.sha }}

      # Subir la imagen a Docker Hub
      - name: Push de la imagen a Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gestor-clientes-back:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gestor-clientes-back:${{ github.sha }}

      # Desplegar en AWS EC2
      - name: Deploy en AWS EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/gestor-clientes-back:latest
            docker stop gestor-clientes-back || true
            docker rm gestor-clientes-back || true
            docker run -d --name gestor-clientes-back -p 8080:8080 --network my-network ${{ secrets.DOCKERHUB_USERNAME }}/gestor-clientes-back:latest
